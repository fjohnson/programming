package context.carmodel;

import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.xml.bind.JAXBElement;

import org.example.carmodel.Car;
import org.example.carmodel.Fleet;

import context.carmodel.persistence.Persistence;

/**
 * This is an example of using Jersey in combination with JAXB.
 * An xsd file describing a fleet of cars, the cars themselves
 * and the owner's of the cars has been made and then a suitable
 * mapping to java objects has been created with JAXB. Now in this
 * class incoming XML descriptions of elements found in the mentioned
 * xsd file are marshalled into their JAXB representations and manipulated.
 * Requests for Cars/fleets/etc are generated by unmarshalling the created
 * JAXB mappings back into XML. 
 * 
 * @author fletcher
 *
 */
@Path("/xmlexample/")
public class CarModelRootResource {
	/* Instance Vars recreated on each request here since new instance
	 * of this class is created for each request.
	 * Map<String,Fleet> fleets = new HashMap<String,Fleet>();
	{
		Fleet defaultFleet = new Fleet();
		fleets.put("Default Fleet", defaultFleet);
	}*/
	
	/*
	 * Actions:
	 * Add car to default fleet
	 * Get cars matching name from default fleet
	 * Add fleet
	 * Get fleet
	 * Add car to fleet
	 * Remove fleet
	 * Remove car from fleet
	 * Remove car from default fleet
	 */
	
	@Path("/car")
	@PUT
	@Consumes(MediaType.APPLICATION_XML)
	@Produces(MediaType.APPLICATION_XML)
	public Car  addNewCar(Car car){
		Persistence.fleets.get("Default Fleet").getCars().add(car);
		return car;
	}
	
	@Path("/car/{name}")
	@GET
	@Produces(MediaType.APPLICATION_XML)
	public List<Car> getCarByNameFromDefaultFleet(@PathParam("name") String name){
		Fleet defaultFleet = Persistence.fleets.get("Default Fleet");
		List<Car> matchingCars = new ArrayList<Car>();
				
		for(Car c : defaultFleet.getCars()){
			if(c.getName().equals(name)) matchingCars.add(c);
		}
		return matchingCars;
	}
	
	@Path("/car2")
	@PUT
	@Consumes({MediaType.APPLICATION_XML,MediaType.TEXT_XML})
	@Produces(MediaType.APPLICATION_XML)
	public String addNewCar2(JAXBElement fi){
		return "<hi>op</hi>";
	}
	
	
	 
}
